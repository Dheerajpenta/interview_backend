swagger: "2.0"
info:
  description: "This is the api documentation of our project"
  version: "1.0.0"
  title: "Interview Quiz App"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "https://interview-backend-app.netlify.app/"
basePath: "/"
tags:
- name: "Candidates"
  description: "Everything about candidates"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "Test"
  description: "Everything about Tests"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "Questions"
  description: "Access to Questions"
  externalDocs:
    description: "Find out more about our store"
    url: "http://swagger.io"
- name: "Skills"
  description: "Access to Skills"
  externalDocs:
    description: "Find out more about our store"
    url: "http://swagger.io"
schemes:
- "https"
- "http"
paths:
  /Candidates:
    post:
      tags:
      - "Candidates"
      summary: "Add new candidates "
      description: ""
      operationId: "addCandidate"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Add the body of the new candidate "
        required: true
        schema:
          $ref: '#'
        
      responses:
        "200":
          description: "successful operation"
        "405":
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    get:
      tags:
      - "Candidates"
      summary: "get existing candidates"
      description: ""
      operationId: "updatePet"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "get all candidates"
        required: true
        schema:
          $ref: "#/definitions/Candidate"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Candidate"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "candidate not found"
        "405":
          description: "Validation exception"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /Candidates/{Candidate_id}:
    get:
      tags:
      - "Candidates"
      summary: "Find Candidate by ID"
      description: "Returns Candidate info"
      operationId: "getPetById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "Candidate_id"
        in: "path"
        description: "ID of candidate to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Candidate"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "candidate not found"
      security:
      - api_key: []
    patch:
      tags:
      - "Candidates"
      summary: "Updates a candidate"
      description: ""
      operationId: "updatePetWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "Candidate_id"
        in: "path"
        description: "ID of candidate that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "formData"
        description: "Updated name of the candidate"
        required: false
        type: "string"
      
      responses:
        "200":
          description: "successful operation"
        "405":
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    delete:
      tags:
      - "Candidates"
      summary: "Deletes a candidate"
      description: ""
      operationId: "deletePet"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "Candidate_id"
        in: "path"
        description: "candidate id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "candidate not found"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /Test:
    post:
      tags:
      - "Test"
      summary: "Add new Tests "
      description: ""
      operationId: "addTest"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Add the body of the new Test "
        required: true
        schema:
          $ref: '#'
        
      responses:
        "200":
          description: "successful operation"
        "405":
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    get:
      tags:
      - "Test"
      summary: "get existing tests"
      description: ""
      operationId: "updateTest"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "get all Tests"
        required: true
        schema:
          $ref: "#/definitions/Test"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Test"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Test not found"
        "405":
          description: "Validation exception"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /Test/{Test_id}:
    get:
      tags:
      - "Test"
      summary: "Find Test by ID"
      description: "Returns Test info"
      operationId: "getTestById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "Test_id"
        in: "path"
        description: "ID of Test to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Test"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Test not found"
      security:
      - api_key: []
    patch:
      tags:
      - "Test"
      summary: "Updates a Test"
      description: ""
      operationId: "updateTestWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "Test_id"
        in: "path"
        description: "ID of Test that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "formData"
        description: "Updated name of the Test"
        required: false
        type: "string"
      
      responses:
        "200":
          description: "successful operation"
        "405":
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    delete:
      tags:
      - "Test"
      summary: "Deletes a Test"
      description: ""
      operationId: "deleteTest"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "Test_id"
        in: "path"
        description: "Test id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Test not found"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /Questions:
    post:
      tags:
      - "Questions"
      summary: "Add new Questions "
      description: ""
      operationId: "addQuestion"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Add the body of the new candidate "
        required: true
        schema:
          $ref: '#'
        
      responses:
        "200":
          description: "successful operation"
        "405":
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    get:
      tags:
      - "Questions"
      summary: "get existing Questions"
      description: ""
      operationId: "updateQuestion"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "get all Questions"
        required: true
        schema:
          $ref: "#/definitions/Questions"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Candidate"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "candidate not found"
        "405":
          description: "Validation exception"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /Questions/{questionId}:
    get:
      tags:
      - "Questions"
      summary: "FindQuestions by ID"
      description: "Returns Candidate info"
      operationId: "getQuestionById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "questionId"
        in: "path"
        description: "ID of candidate to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Questions"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "candidate not found"
      security:
      - api_key: []
    patch:
      tags:
      - "Questions"
      summary: "Updates a Questions"
      description: ""
      operationId: "updateQuestionWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "questionId"
        in: "path"
        description: "ID of candidate that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "formData"
        description: "Updated name of the candidate"
        required: false
        type: "string"
      
      responses:
        "200":
          description: "successful operation"
        "405":
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    delete:
      tags:
      - "Questions"
      summary: "Deletes a question"
      description: ""
      operationId: "deleteQuestion"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "questionId"
        in: "path"
        description: "questionId to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "candidate not found"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /Skills:
    post:
      tags:
      - "Skills"
      summary: "Add new skills "
      description: ""
      operationId: "addSkills"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Add the body of the new candidate "
        required: true
        schema:
          $ref: '#'
        
      responses:
        "200":
          description: "successful operation"
        "405":
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    get:
      tags:
      - "Skills"
      summary: "get existing Skills"
      description: ""
      operationId: "updateSkills"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "get all Skills"
        required: true
        schema:
          $ref: "#/definitions/Skills"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Skills"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "candidate not found"
        "405":
          description: "Validation exception"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /Skills/{Skills_id}:
    get:
      tags:
      - "Skills"
      summary: "Find Skills by ID"
      description: "Returns skills info"
      operationId: "getSkillsById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "Skills_id"
        in: "path"
        description: "ID of candidate to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Skills"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "candidate not found"
      security:
      - api_key: []
    patch:
      tags:
      - "Skills"
      summary: "Updates a skills"
      description: ""
      operationId: "updateSkillsWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "Skills_id"
        in: "path"
        description: "ID of Skills that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "formData"
        description: "Skills name "
        required: false
        type: "string"
      
      responses:
        "200":
          description: "successful operation"
        "405":
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    delete:
      tags:
      - "Skills"
      summary: "Deletes a skills"
      description: ""
      operationId: "deleteSkills"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "Skills_id"
        in: "path"
        description: "candidate id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "candidate not found"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
        
securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Candidate:
    type: "object"
    properties:
      _id:
        type: "integer"
        format: "int64"
      Name:
        type: "string"
      email:
        type: "string"
      mobile_number:
        type: "string"
    xml:
      name: "User"
  Test:
    type: "object"
    properties:
      Test_id:
        type: "integer"
        format: "int64"
      QuestionId:
        type: "array"
        items:
          type: "integer"
          format: "int64"
      Name:
        type: "string"
      Role:
        type: "string"
      Duration:
        type: "string"
      Description:
        type: "string"
      ExpiresAt:
        type: "string"
      Status:
        type: "string"
    
  Questions:
    type: "object"
    properties:
      questionID:
        type: "integer"
        format: "int64"
      questionText:
        type: "string"
      options:
        type: "array"
        items:
          type: "string"
      marks:
        type: "integer"
        format: "int64"
      difficultyLevel:
        type: "integer"
        format: "int64"
      questionType:
        type: "string"
      correctOptions:
        type: "array"
        items:
          type: "string"
      topics:
        type: "array"
        items:
          type: "string"
      tags:
        type: "array"
        items:
          type: "string"
      addedAt:
        type: "string"
      UpdatedAt:
        type: "string"
      
    xml:
      name: "Category"
  Skills:
    type: "object"
    properties:
      _id:
        type: "integer"
        format: "int64"
      SkillName:
        type: "string"
    xml:
      name: "Category"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"